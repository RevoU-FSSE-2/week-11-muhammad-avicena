openapi: 3.0.0
info:
  title: 'DeezChat API Documentation'
  version: 1.0.0
  description: 'Built and implemented role-based access application using Node.js, Express.js, OpenAPI specification, Jest and Swagger.'
servers:
  - url: http://localhost:5001
    description: 'Development server'
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Bearer with JWT Token'
  schemas:
    RegisterUser:
      type: object
      properties:
        username:
          type: string
          default: maker69
        password:
          type: string
          minLength: 8
          default: maker69
        role:
          description: Possible values for roles are maker, approver, admin.
          type: string 
          enum:
            - maker
            - approver
            - admin
          default: maker
      required:
        - username
        - password
        - role
    CreateTransfer:
      type: object
      properties:
        bank:
          type: string
          default: BCA
        amount:
          type: integer
          minimum: 10000
          default: 15000
        toUser:
          type: string 
          default: ayang
        desc:
          type: string
          default: jajan buat ayang
      required:
        - bank
        - amount
        - toUser
        - desc
    LoginUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    TransferData:
      type: object
      properties:
          _id: 
            type: integer
            default: 64e4ddabd76b719basc12nh782 // Generated by mongodb
          bank: 
            type: string
            default: BCA
          amount: 
            type: integer
            default: 45000
          toUser: 
            type: string
            default: ayang
          status: 
            type: string
            default: pending
          desc: 
            type: string
            default: Uang jajan
          createdDate: 
            type: string
            default: 2023-25-8     
    BadRequest:
      type: object
      properties:
        success:
          type: boolean
          default: false
        error:
          type: string
    InternalServerError:
      type: object
      properties:
        error:
          type: string
    Unauthorized:
      type: object
      properties:
        error:
          type: string
    NotFound:
      type: object
      properties:
        success:
          type: boolean 
          default: false 
        message:
          type: string
paths:
  /api/v1/auth/register:
    post:
      tags:
        - auth 
      summary: 'Register user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '200':
          description: 'User Created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: Successfully created a user
                  data:
                    type: object
                    properties:
                      _id:
                        type: integer
                        default: 64e4ddabd76b719 // Generated by mongodb
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'              
  /api/v1/auth/login:
    post:
      tags:
        - auth 
      summary: 'Login user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: 'Login Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data:
                    properties:
                      token: 
                        type: string
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'     
  /api/v1/users:
    get:
      tags:
        - user
      security:
        - bearer: []
      summary: 'List all users'
      responses:
        '200':
          description: 'List of all users'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data:
                    properties:
                      _id: 
                        type: integer
                        default: 64e4ddabd76b719 // Generated by mongodb
                      username: 
                        type: string
                        default: avicena.dev
                      password: 
                        type: integer
                        default: $2b$10$t6xh8Hr43m // hashed password
                      role: 
                        type: string
                        default: admin
                      createdDate: 
                        type: string 
                        format: date
                        default: 2023-25-8
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
                
                
                
                
                