openapi: 3.0.0
info:
  title: 'DeezChat API Documentation'
  version: 1.0.0
  description: 'DeezChat App, a Real-Time Chat built using Vanila.js, Node.js, Express.js, WebSocket, MongoDB and implemented RBAC with JWT, Api docs by Swagger, Unit Testing by Jest.'
servers:
  - url: https://deezchat.avicena.dev
    description: 'Production server'
  - url: http://localhost:5001
    description: 'Development server'
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Bearer with JWT Token'
  schemas:
    RegisterUser:
      type: object
      properties:
        username:
          type: string
          default: user69
        password:
          type: string
          minLength: 8
          default: user69
        gender:
          description: Only male & female are allowed.
          type: string 
          enum:
            - male
            - female
          default: male
      required:
        - username
        - password
        - gender
    LoginUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    RoomData:
      type: object
      properties:
          _id: 
            type: integer
            default: 64e4ddabd76b719basc12nh782 // Generated by mongodb
          roomName: 
            type: string
            default: Jitsi
          createdBy: 
            type: string
            default: avicena.manager
          createdDate: 
            type: string
            default: 2023-25-8     
    BadRequest:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
    InternalServerError:
      type: object
      properties:
        message:
          type: string
    Unauthorized:
      type: object
      properties:
        message:
          type: string
    NotFound:
      type: object
      properties:
        success:
          type: boolean 
          default: false 
        message:
          type: string
paths:
  /api/v1/auth/register:
    post:
      tags:
        - auth 
      summary: 'Register user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: Successfully created a user
                  data:
                    type: object
                    properties:
                      _id:
                        type: integer
                        default: 64e4ddabd76b719 // Generated by mongodb
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'              
  /api/v1/auth/login:
    post:
      tags:
        - auth 
      summary: 'Login user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: 'Login Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data:
                    properties:
                      token: 
                        type: string
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/v1/rooms:
    post:
      operationId: 'Create a room'
      tags:
        - rooms 
      summary: 'Create a room'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomData'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: Successfully created a user
                  data:
                    type: object
                    properties:
                      _id:
                        type: integer
                        default: 64e4ddabd76b719aah248cmzx // Generated by mongodb
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'    
    get:
      operationId: Get all list rooms
      tags:
        - rooms
      security:
        - bearer: []
      summary: 'List all room'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomData'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/v1/rooms/{id}:
    delete:
      operationId: Delete room by id
      tags:
        - rooms
      security:
        - bearer: []
      summary: 'Delete room by id'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string 
        description: ID of the room list
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: Successfully delete a room
                  data:
                    $ref: '#/components/schemas/RoomData'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/v1/participants:
    post:
      operationId: 'Join a room'
      tags:
        - participants 
      summary: 'Join a room'
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  username:
                    type: string
                    default: avicena.dev
                  roomName:
                    type: string
                    default: Jitsi
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: Successfully created a user
                  data:
                    type: object
                    properties:
                      _id:
                        type: integer
                        default: 64e4ddabd76b719aah248cmzx // Generated by mongodb
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    get:
      operationId: Get user join by query
      tags:
        - participants
      security:
        - bearer: []
      summary: 'Get user join by username & roomName query'
      parameters:
        - in: query
          name: username
          schema:
            type: string
            default: Cena
          description: Name of the user
        - in: query
          name: roomName
          schema:
            type: string
            default: Jitsi no Jutsu
          description: Name of the room
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: User join found by roomName & username
                  data:
                    type: object
                    properties:
                      _id:
                        type: integer
                        default: 64e4ddabd76b719aah248cmzx // Generated by mongodb
                      username:
                        type: string
                        default: Cena
                      roomName: 
                        type: string
                        default: Jitsi no Jutsu
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/v1/participants/list:
    get:
      operationId: Get user join by query
      tags:
        - participants
      security:
        - bearer: []
      summary: 'Get user join by roomName query'
      parameters:
        - in: query
          name: roomName
          schema:
            type: string
            default: Jitsi no Jutsu
          description: Name of the room
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: User join found by roomName
                  data:
                    type: array
                    properties:
                      _id:
                        type: integer
                        default: 64e4ddabd76b719aah248cmzx // Generated by mongodb
                      username:
                        type: string
                        default: Cena
                      roomName: 
                        type: string
                        default: Jitsi no Jutsu
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      operationId: Leave room by username
      tags:
        - participants
      security:
        - bearer: []
      summary: 'Leave room by username'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  default: Cena
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: Successfully delete a room
                  data:
                    $ref: '#/components/schemas/RoomData'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/v1/users:
    get:
      tags:
        - user
      security:
        - bearer: []
      summary: 'List all users'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data:
                    properties:
                      _id: 
                        type: integer
                        default: 64e4ddabd76b719 // Generated by mongodb
                      username: 
                        type: string
                        default: avicena.dev
                      password: 
                        type: integer
                        default: $2b$10$t6xh8Hr43m // hashed password
                      role: 
                        type: string
                        default: manager
                      gender: 
                        type: string
                        default: male
                      createdDate: 
                        type: string 
                        format: date
                        default: 2023-25-8
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    patch:
      operationId: update role user
      tags:
        - user
      security:
        - bearer: []
      summary: 'Update role user'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                role:
                  type: string
                  enum:
                    - member
                    - admin
                  default: admin
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                    default: Successfully updated a role user
                  data:
                    properties: 
                      oldVersion: 
                        type: object
                        properties:
                            _id: 
                              type: integer
                              default: 64e4ddabd76b719basc12nh782 // Generated by mongodb
                            username: 
                              type: string
                              default: avicena
                            password: 
                              type: integer
                              default: 12qs4823 // hashed password
                            role: 
                              type: string
                              default: member
                            gender: 
                              type: string
                              default: male
                            createdDate: 
                              type: string
                              default: 2023-25-8   
                      updateVersion: 
                        type: object
                        properties:
                            _id: 
                              type: integer
                              default: 64e4ddabd76b719basc12nh782 // Generated by mongodb
                            username: 
                              type: string
                              default: avicena
                            password: 
                              type: integer
                              default: 12qs4823 // hashed password
                            role: 
                              type: string
                              default: manager
                            gender: 
                              type: string
                              default: male
                            createdDate: 
                              type: string
                              default: 2023-25-8   
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/v1/users/{id}:
    get:
      tags:
        - user
      security:
        - bearer: []
      summary: 'Get user by id'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data:
                    properties:
                      _id: 
                        type: integer
                        default: 64e4ddabd76b719 // Generated by mongodb
                      username: 
                        type: string
                        default: avicena.dev
                      password: 
                        type: integer
                        default: $2b$10$t6xh8Hr43m // hashed password
                      role: 
                        type: string
                        default: manager
                      gender: 
                        type: string
                        default: male
                      createdDate: 
                        type: string 
                        format: date
                        default: 2023-25-8
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
                
                
                
                
                